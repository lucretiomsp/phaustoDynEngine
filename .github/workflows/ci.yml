name: CI

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - uses: actions/checkout@v3

      # 2. Install system dependencies required by Faust / dynamic engine
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            g++ \
            libpulse-dev \
            libjack-jackd2-0 \
            libjack-jackd2-dev \
            libasound2-dev \
            libfftw3-dev

      # 3. Prepare build folder and copy libraries/tests safely
      - name: Prepare build folder
        run: |
          mkdir -p build
          cp -a librariesBundle_Linux/. build/
          cp -a tests/. build/

      # 4. Fix versioned .so symlinks if necessary
      - name: Fix library symlinks
        run: |
          cd build
          for lib in libsndfile.so.1 libfaust.so.2; do
            if [ -f "$lib" ] && [ ! -L "${lib%.*}" ]; then
              echo "Creating symlink for $lib"
              ln -sf "$lib" "${lib%.*}"
            fi
          done

      # 5. Check library dependencies
      - name: Check library dependencies
        run: |
          cd build
          export LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH
          echo "üîç Full ldd output for libdynamic-engine.so:"
          ldd libdynamic-engine.so
          echo "üîç Checking for missing dependencies..."
          if ldd libdynamic-engine.so | grep -q "not found"; then
            echo "‚ùå Missing dependency detected in libdynamic-engine.so!"
            exit 1
          else
            echo "‚úÖ All dependencies found"
          fi

      # 6. Compile and run the test program
      - name: Build and run test program
        run: |
          cd build
          g++ test_dynamic_engine.cpp -L. -ldynamic-engine -o test_dynamic_engine
          echo "üöÄ Running test program..."
          LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH ./test_dynamic_engine

      # 7. Upload dynengine libraries as artifacts
      - name: Upload DynEngine libraries as artifact
        uses: actions/upload-artifact@v3
        with:
          name: dynengine-libs
          path: build/*.so
