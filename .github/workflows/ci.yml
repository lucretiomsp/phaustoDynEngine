name: CI

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - uses: actions/checkout@v4

      # 2. Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            g++ \
            libpulse-dev \
            libpulse0 \
            libjack-jackd2-0 \
            libjack-jackd2-dev \
            libasound2-dev \
            libfftw3-dev \
            libsndfile1 \
            libflac8

      # 3. Prepare build folder
      - name: Prepare build folder
        run: |
          mkdir -p build
          cp -a librariesBundle_Linux/. build/
          cp -a tests/. build/

      # 4. Remove broken or unnecessary .so files
      - name: Clean broken .so files
        run: |
          cd build
          rm -f libFLAC.so.* libpulse*.so.* libjack*.so.*

      # 5. Fix local symlinks for bundled libraries
      - name: Fix library symlinks
        run: |
          cd build
          # libsndfile
          if [ -f libsndfile.so.1.0.28 ] && [ ! -L libsndfile.so.1 ]; then
            echo "Creating symlink: libsndfile.so.1 ‚Üí libsndfile.so.1.0.28"
            ln -sf libsndfile.so.1.0.28 libsndfile.so.1
          fi
          # libfaust
          if [ -f libfaust.so.2.0.0 ] && [ ! -L libfaust.so.2 ]; then
            echo "Creating symlink: libfaust.so.2 ‚Üí libfaust.so.2.0.0"
            ln -sf libfaust.so.2.0.0 libfaust.so.2
          fi
          # Verify symlinks
          ls -l libsndfile.so* libfaust.so* || true

      # 6. Verify .so files are valid (non-empty)
      - name: Verify shared libraries
        run: |
          cd build
          for lib in libsndfile.so.1 libfaust.so.2 libdynamic-engine.so; do
            if [ ! -s "$lib" ]; then
              echo "‚ùå $lib is empty or corrupted!"
              exit 1
            fi
          done

      # 7. Check library dependencies
      - name: Check library dependencies
        run: |
          cd build
          export LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH
          echo "üîç Full ldd output for libdynamic-engine.so:"
          ldd libdynamic-engine.so
          echo "üîç Checking for missing dependencies..."
          if ldd libdynamic-engine.so | grep -q "not found"; then
            echo "‚ùå Missing dependency detected in libdynamic-engine.so!"
            exit 1
          else
            echo "‚úÖ All dependencies found"
          fi

      # 8. Compile and run test program
      - name: Build and run test program
        run: |
          cd build
          g++ test_dynamic_engine.cpp -L. -ldynamic-engine -o test_dynamic_engine
          echo "üöÄ Running test program..."
          LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH ./test_dynamic_engine

      # 9. Upload dynengine libraries as artifact
      - name: Upload DynEngine libraries as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dynengine-libs
          path: build/*.so
